// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  emailVerified DateTime?
  password      String?
  createdAt     DateTime    @default(now())
  image         String?
  accounts      Account[]
  workspaces    Workspace[]
}

//TODO : Limit the workspace Category and Item
//TODO : Limit the lenght by database, currently only form schema validation
//TODO : Close workspace option 
model Workspace {
  id          String   @id @default(uuid())
  name        String
  userId      String
  order       Int
  description String
  isFavorite  Boolean  @default(false)
  isClosed    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lists List[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model List {
  id          String    @id @default(cuid())
  name        String
  order       Int
  cards       Card[]
  createAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Card {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String?
  order       Int
  listId      String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
